#version 120
/**
 GLSL implementation of volumetric cloud rendering as
 described in http://www.blog.sirenix.net/blog/realtime-volumetric-clouds-in-unity
 See a live demo at https://www.shadertoy.com/view/4lGGWy
 @author Toni Sagrista
**/
#define PI 3.14159265359
#define octaves 5

uniform sampler2D u_texture0;

uniform vec2 u_viewport;

uniform float u_opacity;
uniform float u_iterations = 100.0;
uniform float u_cloudDensity = 0.5;
uniform float u_viewDistance = 6.0;
uniform vec3 u_cloudColor = vec3(1, .8, .5);
uniform vec3 u_skyColor = vec3(0.6, 0.6, 0.9);

uniform float u_time;
uniform vec3 u_camPos;
uniform vec3 u_camUp;
uniform vec3 u_camDir;

varying vec2 v_texCoords;

float noise(vec3 x)
{
    vec3 p = floor(x);
    vec3 f = fract(x);
	f = f * f * (3.0 - 2.0 * f);
	
	vec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;
	vec2 rg = texture2D(u_texture0, (uv + 0.5) / 256.0).yx;
	return mix( rg.x, rg.y, f.z );
}     


float fbm(vec3 pos) {
    float f = 0.;
    for (int i = 0; i < octaves; i++) { 
        f += noise(pos) / pow(2.0, float(i + 1)); 
        pos *= 2.01; 
    } 
    f = f / (1.0 - 1.0 / pow(2.0, float(octaves + 1))); 
    return f; 
}

vec4 frag(vec2 uv)
{
	vec3 camUp = normalize(u_camUp);
	vec3 camPos = vec3(u_camPos);
    vec3 camDir = normalize(u_camDir);
    vec3 camRight = cross(camUp, camDir);
    
    vec3 ray = camUp * uv.y + camRight * uv.x + camDir;
    vec3 pos = camPos;

    // So now we have a position, and a ray defined for our current fragment, and we know from earlier in this article that it matches the field of view and aspect ratio of the camera. And we can now start iterating and creating our clouds. 
    // We will not be ray-marching towards any distance field in this example. So the following code should be much easier to understand.
    // pos is our original position, and p is our current position which we are going to be using later on.
    vec3 p = pos;
    // For each iteration, we read from our noise function the density of our current position, and adds it to this density variable.
    float density = 0.0;

    for (float i = 0.0; i < u_iterations; i++)
    {
        // f gives a number between 0 and 1.
        // We use that to fade our clouds in and out depending on how far and close from our camera we are.
        float f = i / u_iterations;
        // And here we do just that:
        float alpha = smoothstep(0.0, u_iterations * 0.2, i) * (1.0 - f) * (1.0 - f);
        // Note that smoothstep here doesn't do the same as Mathf.SmoothStep() in Unity C# - which is frustrating btw. Get a grip Unity!
        // Smoothstep in shader languages interpolates between two values, given t, and returns a value between 0 and 1. 
        // To get a bit of variety in our clouds we collect two different samples for each iteration.
        float denseClouds = smoothstep(u_cloudDensity, 0.75, fbm(p));
        float lightClouds = (smoothstep(-0.2, 1.2, fbm(p * 2.0)) - 0.5) * 0.5;
        // Note that I smoothstep again to tell which range of the noise we should consider clouds.
        // Here we add our result to our density variable
        density += (lightClouds + denseClouds) * alpha;
        // And then we move one step further away from the camera.
        p = pos + ray * f * u_viewDistance;
    }
    // And here I just melted all our variables together with random numbers until I had something that looked good.
    // You can try playing around with them too.
    float l = (density / u_iterations) * 20.0;
    vec3 color = u_skyColor + (u_cloudColor.rgb - 0.5) * l;

    return vec4(color, 1.0);
}

float luma(vec4 color) {
  return dot(color.rgb, vec3(0.299, 0.587, 0.114));
}

void main()
{
    float ar = u_viewport.x / u_viewport.y;
    
    vec2 uv = v_texCoords * 3.0 - 1.5;
    uv.x *= ar;

	vec4 col = frag(uv);
	float level = luma(col);
    gl_FragColor = col;
}